/* -*- Mode: c++; c-basic-offset: 2; indent-tabs-mode: nil; tab-width: 40 -*- */
/* vim: set ts=2 et sw=2 tw=40: */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

interface nsIDOMDOMRequest;

dictionary NetworkPolicyConnection
{
  DOMString connectionType;
  boolean allowed;
  boolean prefered;
  long max;
};

dictionary NetworkPolicy
{
  DOMString app;
  boolean allowNetworkAccess;
  jsval policies;                                  // NetworkPolicyConnection[]
};

[scriptable, uuid(d7dcbc77-edf4-40c8-9497-4dca4cf750c7)]
interface nsIDOMMozNetworkPoliciesManager : nsISupports
{
  readonly attribute jsval connectionTypes;             // DOMString[]
  readonly attribute DOMString defaultPolicyName;       // Name for the default settings (to be used instead the application name)
  readonly attribute DOMString interfacePolicyName;     // Name for the global interface policy (to be used instead the application name)

  /**
   * Set a policy
   *
   * @param policy [optional]
   *        A NetworkPolicy object that describes the policy to put
   *        in effect. If `policy.app` is `defaultPolicyName`,
   *        the default network policy is affected.
   *        If `policy.app` is `interfacePolicyName`,
   *        the generic interface policy is affected.
   *
   * @return NetworkPolicy object with the new policy
   */
  nsIDOMDOMRequest set(in jsval policy);

  /**
   * Get a policy
   *
   * @param application
   *        Application name to recover policies.
   *        If application is an empty string, all stored policies
   *        will be delivered. If application is `defaultPolicyName`,
   *        the default network policy is affected.
   *        If application is `interfacePolicyName`,
   *        the generic interface policy is affected.
   *
   * @return NetworkPolicy object with the queried policy.
   *         If all policies should be returned, an array of
   *         NetworkPolicy objects will be returned.
   */
  nsIDOMDOMRequest get(in DOMString application);

  /**
   * Get a policy synchronously (if previously cached)
   *
   * @param application
   *        Application name to recover policies.
   *        If application is `defaultPolicyName`,
   *        the default network policy is affected.
   *        If application is `interfacePolicyName`,
   *        the generic interface policy is affected.
   *
   * @return NetworkPolicy object with the queried policy.
   *         If not cached, null will be returned.
   */
  jsval getSync(in DOMString application);


};
